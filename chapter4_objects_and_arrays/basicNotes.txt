Arrays

used for storing sequemces of values
syntax - 
ListOfNumbers = [2, 3, 5, 7];
to access array elements - ListOfNumbers[i]
i -> index   i = 0,1,2...

Properties 

name[0] == name.0   // also for string

name.length -> returns length     // also for string

Every string has a toUpperCase property. When called, it will return a copy
of the string in which all letters have been converted to uppercase. There is
also toLowerCase, going the other way

"doh".toUpperCase returns "DOH"

push and pop 

let sequence = [1, 2, 3];
sequence.push(4);
sequence.push(5);
console.log(sequence);
// → [1, 2, 3, 4, 5]
console.log(sequence.pop());
// → 5
console.log(sequence);
// → [1, 2, 3, 4]

note - typeof []  -> returns "object"

it means that array is also a kind of object specialised to store a sequence of objects

In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.

object syntax in Javascript

let descriptions = {
work: "Went to work",
"touched tree": "Touched a tree"
};

We will represent the journal that Jacques keeps as an array of objects.

let journal = [
{events: ["work", "touched tree", "pizza",
"running", "television"],
squirrel: false},
{events: ["work", "ice cream", "cauliflower",
"lasagna", "touched tree", "brushed teeth"],
squirrel: false},
{events: ["weekend", "cycling", "break", "peanuts",
"beer"],
squirrel: true},
/* and so on... */
];


Strings and their properties

str.slice(a,b)  -> including a and b 

str.indexOf("v") -> returns the index of first occurence of 'v'

str.trim() -> the trim method removes whitespace from the start and end of the string

str.repeat(3) -> concatenate the same string and triple it

Math object

Math.max(maximum)
Math.min(minimum)
Math.sqrt(square root)
Math.cos(cosine)
Math.sin(sine)
Math.tab(tangent)
Math.PI  -> return pi
Math.random()  -> returns a pseudorandom number between zero(inclusive) and one(exclusve)

Math.floor(a)  -> rounds down to the nearest whole number
Math.ceil(a) -> rounds up to the nearest whole number
Math.round() -> round the nearest whole number

Destructuring in Javascript

Destructuing means unpacking values from arrays, or properties from objects, into distinct variables.
Destructuring is a feature in JavaScript that allows you to extract data from arrays, objects, and other data structures in a concise and readable way.

There are two types of destructuring in JavaScript:

Array destructuring
Object destructuring

Array Destructuring:

Array destructuring allows you to extract data from arrays into variables. For example:

javascript

const numbers = [1, 2, 3];
const [first, second, third] = numbers;
console.log(first); // 1
console.log(second); // 2
console.log(third); // 3

In the code above, we declare a variable numbers that contains an array with three elements. We then use array destructuring to extract the values of the first, second, and third elements of the numbers array and assign them to the variables first, second, and third, respectively.

We can also use array destructuring to swap the values of two variables:

javascript

let a = 1;
let b = 2;
[a, b] = [b, a];
console.log(a); // 2
console.log(b); // 1

In the code above, we declare two variables a and b and assign them the values of 1 and 2, respectively. We then use array destructuring to swap their values.

Object Destructuring:
Object destructuring allows you to extract data from objects into variables. For example:

javascript

const person = { name: 'John', age: 30 };
const { name, age } = person;
console.log(name); // 'John'
console.log(age); // 30
In the code above, we declare a variable person that contains an object with two properties: name and age. We then use object destructuring to extract the values of the name and age properties of the person object and assign them to the variables name and age, respectively.

We can also use object destructuring with default values:

javascript

const person = { name: 'John' };
const { name, age = 30 } = person;
console.log(name); // 'John'
console.log(age); // 30

In the code above, we declare a variable person that contains an object with one property: name. We then use object destructuring to extract the value of the name property of the person object and assign it to the variable name. We also provide a default value of 30 for the age variable, in case the person object does not have an age property.

JSON (javascript object notation)

objects and arrays are stored in computer memory as sequencrs of bits holding the addresses of their contents.

to save this data in a file so that we can access this data later or to send this data to another computer, we need to convert 
this data to a description. What we can do is the serialization of data, a popular serialization format is JSON.

JSON looks similar to JavaScript’s way of writing arrays and objects, with a
few restrictions. All property names have to be surrounded by double quotes,
and only simple data expressions are allowed—no function calls, bindings, or
anything that involves actual computation. Comments are not allowed in
JSON.
A journal entry might look like this when represented as JSON data:
{
"squirrel": false,
"events": ["work", "touched tree", "pizza", "running"]
}

JavaScript gives us the functions JSON.stringify and JSON.parse to convert
data to and from this format. The first takes a JavaScript value and returns
a JSON-encoded string. The second takes such a string and converts it to the
value it encodes.
let string = JSON.stringify({squirrel: false,
events: ["weekend"]});
console.log(string);
// → {"squirrel":false,"events":["weekend"]}
console.log(JSON.parse(string).events);
// → ["weekend"]