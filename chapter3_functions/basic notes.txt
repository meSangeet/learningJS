basic syntax 

const square = function(x) {
    return x*x;
}

For bindings defined outside of any function or block, the scope is
the whole programâ€”you can refer to such bindings wherever you want. These
are called global.
But bindings created for function parameters or declared inside a function
can be referenced only in that function, so they are known as local bindings.

Declaration notation
There is a slightly shorter way to create a function binding. When the function
keyword is used at the start of a statement, it works differently.

function square(x) {
return x * x;
}

This is a function declaration.


Arrow notation

const power = (base,exponent) =>  {
    let result = 1;
    for(let count = 0; count < exponent; count++){
        result *= base;
    }
    return result;
};

When there is only one parameter name, you can omit the parentheses
around the parameter list. If the body is a single expression, rather than a
block in braces, that expression will be returned from the function. So, these
two definitions of square do the same thing:
const square1 = (x) => { return x * x; };
const square2 = x => x * x;


Lexical Scope In Javascript

Lexical scope of a function is the scope of the parent function in which it is created. In other words, an item's lexical scope is the place in which the item got created.

Closure In Javascript

A closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer functions scope from an inner function even after the outer function is gone. 

for example

function sum(var a)
{
    var b = 4;
    function y(var c)
    {
        return a+b+c;
    }
    return y;
}

var z = sum(2);

above line will assign a function y to the variable z.
so now the z variable looks like 
z = function(var c)
{
    return a+b+c;
}

but now we don't have a and b   yet if we call z(2) we will get 2 + 4 + 2 = 8. this is because the values of a and b were in the closure of y function. for more understanding checkout the closure.js file in the folder chapter 3.



